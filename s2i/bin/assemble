#!/bin/bash

function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2
  fi
}


restore_saved_artifacts

ls -ltr

echo "---> Installing application source"

shopt -s dotglob

# move the application source
mv /tmp/src/* "$HOME"

ls -ltr $HOME/src

# build application artifacts
pushd ${HOME}

echo "---> Building application from source $HOME/"

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR

# artifacts (*.war, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

DEPLOY_DIR=/opt/mule-standalone-4.1.1/apps/

# Copy the source for compilation
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then

  pushd $LOCAL_SOURCE_DIR &> /dev/null
  JAVA_HOME=/etc/alternatives/java_sdk

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests -B"
  fi

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn package"
    exit $ERR
  fi

  echo "Moving built jar/war files into $DEPLOY_DIR for later deployment..."
  popd &> /dev/null

fi

cp $LOCAL_SOURCE_DIR/target/*.jar $DEPLOY_DIR/
cp $LOCAL_SOURCE_DIR/target/*.zip $DEPLOY_DIR/

echo "---> Copied jar/zip file to $DEPLOY_DIR"

ls -ltr $DEPLOY_DIR

echo "...done"

# set permissions for any installed artifacts
fix-permissions /opt/app-root

exit $rc